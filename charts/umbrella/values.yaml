# #############################################################################
# Copyright (c) 2023,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
portal:
  enabled: false
  replicaCount: 1
  postgresql:
    postgresql:
    nameOverride: "portal-backend-postgresql"
    architecture: standalone
    primary:
      persistence:
        enabled: false
  portalAddress: "https://portal.example.org"
  portalBackendAddress: "https://portal-backend.example.org"
  centralidpAddress: "https://centralidp.example.org"
  sharedidpAddress: "https://sharedidp.example.org"
  semanticsAddress: "https://semantics.example.org"
  bpdmPartnersPoolAddress: "https://business-partners.example.org"
  bpdmPortalGateAddress: "https://business-partners.example.org"
  custodianAddress: "https://managed-identity-wallets.example.org"
  sdfactoryAddress: "https://sdfactory.example.org"
  clearinghouseAddress: "https://validation.example.org"
  clearinghouseTokenAddress: "https://keycloak.example.org/realms/example/protocol/openid-connect/token"
  frontend:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "my-ca-issuer"
        nginx.ingress.kubernetes.io/rewrite-target: "/$1"
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-origin: "https://*.example.org"
      tls:
        # -- Provide tls secret.
        - secretName: "portal.example.org-tls"
          # -- Provide host for tls secret.
          hosts:
            - "portal.example.org"
      hosts:
        - host: "portal.example.org"
          paths:
            - path: "/(.*)"
              pathType: "ImplementationSpecific"
              backend:
                service: "portal"
                port: 8080
            - path: "/registration/(.*)"
              pathType: "ImplementationSpecific"
              backend:
                service: "registration"
                port: 8080
            - path: "/((assets|documentation)/.*)"
              pathType: "ImplementationSpecific"
              backend:
                service: "assets"
                port: 8080
  backend:
    dotnetEnvironment: "Development"
    keycloak:
      central:
        clientId: "sa-cl1-reg-2"
        clientSecret: "aEoUADDw2aNPa0WAaKGAyKfC80n8sKxJ"
        jwtBearerOptions:
          requireHttpsMetadata: "false"
      shared:
        clientId: "sa-cl1-reg-1"
        clientSecret: "YPA1t6BMQtPtaG3fpH8Sa8Ac6KYbPUM7"
    registration:
      swaggerEnabled: true
    administration:
      swaggerEnabled: true
    appmarketplace:
      swaggerEnabled: true
    services:
      swaggerEnabled: true
    notification:
      swaggerEnabled: true
    mailing:
      host: "smtp.example.org"
      port: "587"
      user: "smtp-user"
      senderEmail: "smtp@example.org"
      password: ""
    provisioning:
      sharedRealm:
        smtpServer:
          host: "smtp.example.org"
          port: "587"
          user: "smtp-user"
          password: ""
          from: "smtp@example.org"
          replyTo: "smtp@example.org"
    # -- docs: https://portal-backend.example.org/api/administration/swagger/index.html
    # https://portal-backend.example.org/api/registration/swagger/index.html
    # https://portal-backend.example.org/api/apps/swagger/index.html
    # https://portal-backend.example.org/api/services/swagger/index.html
    # https://portal-backend.example.org/api/notification/swagger/index.html
    ingress:
      enabled: true
      name: "portal-backend"
      annotations:
        cert-manager.io/cluster-issuer: "my-ca-issuer"
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "8m"
        nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:3000, https://*.example.org"
      tls:
        # -- Provide tls secret.
        - secretName: "portal-backend.example.org-tls"
          # -- Provide host for tls secret.
          hosts:
            - "portal-backend.example.org"
      hosts:
        - host: "portal-backend.example.org"
          paths:
            - path: "/api/registration"
              pathType: "Prefix"
              backend:
                service: "registration-service"
                port: 8080
            - path: "/api/administration"
              pathType: "Prefix"
              backend:
                service: "administration-service"
                port: 8080
            - path: "/api/notification"
              pathType: "Prefix"
              backend:
                service: "notification-service"
                port: 8080
            - path: "/api/provisioning"
              pathType: "Prefix"
              backend:
                service: "provisioning-service"
                port: 8080
            - path: "/api/apps"
              pathType: "Prefix"
              backend:
                service: "marketplace-app-service"
                port: 8080
            - path: "/api/services"
              pathType: "Prefix"
              backend:
                service: "services-service"
                port: 8080

centralidp:
  enabled: false
  keycloak:
    nameOverride: "centralidp"
    replicaCount: 1
    postgresql:
      nameOverride: "centralidp-postgresql"
      architecture: standalone
      primary:
        persistence:
          enabled: false
    proxy: edge
    initContainers:
      - name: realm-import
        image: docker.io/tractusx/umbrella-init-container:0.0.1-init
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying realms..."
            cp -R /import/catenax-central/realms/* /realms
        volumeMounts:
        - name: realms
          mountPath: "/realms"
      - name: theme-import
        image: docker.io/tractusx/portal-iam:v2.1.0
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying themes..."
            cp -R /import/themes/catenax-central/* /themes
        volumeMounts:
        - name: themes
          mountPath: "/themes"
      - name: init-certs
        image: docker.io/bitnami/keycloak:22.0.3-debian-11-r14
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
          - -ec
          - |-
            keytool -import -file "/certs/tls.crt" \
                    -keystore "/opt/bitnami/keycloak/certs/keycloak.truststore.jks" \
                    -storepass "${KEYCLOAK_SPI_TRUSTSTORE_PASSWORD}" \
                    -noprompt
        env:
          - name: KEYCLOAK_SPI_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: centralidp-spi
                key: spi-truststore-password
        volumeMounts:
          - name: certificates
            mountPath: /certs
          - name: shared-certs
            mountPath: "/opt/bitnami/keycloak/certs"
    extraEnvVars:
      - name: KEYCLOAK_LOG_LEVEL
        value: TRACE
      - name: KEYCLOAK_SPI_TRUSTSTORE_FILE
        value: "/opt/bitnami/keycloak/certs/keycloak.truststore.jks"
      - name: KEYCLOAK_SPI_TRUSTSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: centralidp-spi
            key: spi-truststore-password
      - name: KEYCLOAK_EXTRA_ARGS
        value: "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/realms/CX-Central-realm.json -Dkeycloak.migration.strategy=IGNORE_EXISTING"
    extraVolumes:
      - name: realms
        emptyDir: {}
      - name: themes
        emptyDir: {}
      - name: certificates
        secret:
          secretName: root-secret
          defaultMode: 420
      - name: shared-certs
        emptyDir: {}
    extraVolumeMounts:
      - name: realms
        mountPath: "/realms"
      - name: themes
        mountPath: "/opt/bitnami/keycloak/themes/catenax-central"
      - name: certificates
        mountPath: /certs
      - name: shared-certs
        mountPath: "/opt/bitnami/keycloak/certs"
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hostname: "centralidp.example.org"
      annotations:
        cert-manager.io/cluster-issuer: "my-ca-issuer"
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS"
        nginx.ingress.kubernetes.io/cors-allow-origin: "https://centralidp.example.org"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "20"
        nginx.ingress.kubernetes.io/use-regex: "true"
      tls: true
  secrets:
    auth:
      existingSecret:
        # -- Password for the admin username 'admin'. Secret-key 'admin-password'.
        adminpassword: ""
      spi:
        truststorePassword: ""

sharedidp:
  enabled: false
  keycloak:
    nameOverride: "sharedidp"
    replicaCount: 1
    postgresql:
      nameOverride: "sharedidp-postgresql"
      architecture: standalone
      primary:
        persistence:
          enabled: false
    proxy: edge
    initContainers:
      - name: realm-import
        image: docker.io/tractusx/umbrella-init-container:0.0.1-init
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying realms..."
            cp -R /import/catenax-shared/realms/* /realms
        volumeMounts:
        - name: realms
          mountPath: "/realms"
      - name: theme-import
        image: docker.io/tractusx/portal-iam:v2.1.0
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying themes-catenax-shared..."
            cp -R /import/themes/catenax-shared/* /themes-catenax-shared
            echo "Copying themes-catenax-shared-portal..."
            cp -R /import/themes/catenax-shared-portal/* /themes-catenax-shared-portal
        volumeMounts:
        - name: themes-catenax-shared
          mountPath: "/themes-catenax-shared"
        - name: themes-catenax-shared-portal
          mountPath: "/themes-catenax-shared-portal"
      - name: init-certs
        image: docker.io/bitnami/keycloak:22.0.3-debian-11-r14
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
          - -ec
          - |-
            keytool -import -file "/certs/tls.crt" \
                    -keystore "/opt/bitnami/keycloak/certs/keycloak.truststore.jks" \
                    -storepass "${KEYCLOAK_SPI_TRUSTSTORE_PASSWORD}" \
                    -noprompt
        env:
          - name: KEYCLOAK_SPI_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sharedidp-spi
                key: spi-truststore-password
        volumeMounts:
          - name: certificates
            mountPath: /certs
          - name: shared-certs
            mountPath: "/opt/bitnami/keycloak/certs"
    extraEnvVars:
      - name: KEYCLOAK_SPI_TRUSTSTORE_FILE
        value: "/opt/bitnami/keycloak/certs/keycloak.truststore.jks"
      - name: KEYCLOAK_SPI_TRUSTSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: sharedidp-spi
            key: spi-truststore-password
      - name: KEYCLOAK_EXTRA_ARGS
        value: "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/realms -Dkeycloak.migration.strategy=IGNORE_EXISTING"
    extraVolumes:
      - name: realms
        emptyDir: {}
      - name: themes-catenax-shared
        emptyDir: {}
      - name: themes-catenax-shared-portal
        emptyDir: {}
      - name: certificates
        secret:
          secretName: root-secret
          defaultMode: 420
      - name: shared-certs
        emptyDir: {}
    extraVolumeMounts:
      - name: realms
        mountPath: "/realms"
      - name: themes-catenax-shared
        mountPath: "/opt/bitnami/keycloak/themes/catenax-shared"
      - name: themes-catenax-shared-portal
        mountPath: "/opt/bitnami/keycloak/themes/catenax-shared-portal"
      - name: certificates
        mountPath: /certs
      - name: shared-certs
        mountPath: "/opt/bitnami/keycloak/certs"
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hostname: "sharedidp.example.org"
      annotations:
        cert-manager.io/cluster-issuer: "my-ca-issuer"
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS"
        nginx.ingress.kubernetes.io/cors-allow-origin: "https://sharedidp.example.org"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "20"
        nginx.ingress.kubernetes.io/use-regex: "true"
      tls: true
  secrets:
    auth:
      existingSecret:
        # -- Password for the admin username 'admin'. Secret-key 'admin-password'.
        adminpassword: ""
      spi:
        truststorePassword: ""

bpndiscovery:
  enabled: false
  enablePostgres: true
  bpndiscovery:
    authentication: false
    bpndiscoverEndpoint:
      allowedTypes: oen,wmi,passtype,manufacturerPartId
      description: Service to discover BPN for different kind of type numbers
      endpointAddress: /bpndiscovery
      documentation: /bpndiscovery/swagger-ui/index.html
      timeToLive: "31536000"
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "bpndiscovery-postgresql"
    primary:
      persistence:
        enabled: false
        size: 8Gi

discoveryfinder:
  enabled: false
  enablePostgres: true
  discoveryfinder:
    authentication: true
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
    host: semantics.example.org
    properties:
      discoveryfinder:
        initialEndpoints:
          - type: bpn
            endpointAddress: https://portal-backend.example.org/api/administration/Connectors/discovery
            description: Service to discover connector endpoints based on bpns
            documentation: https://portal-backend.example.org/api/administration/swagger/index.html
    idp:
      issuerUri: "https://centralidp.example.org/auth/realms/CX-Central"
      publicClientId: "Cl21-CX-DF"
    dataSource:
      url: "jdbc:postgresql://{{ .Release.Name }}-discoveryfinder-postgresql:5432/discoveryfinder"
    # -- docs: https://semantics.example.org/discoveryfinder/swagger-ui/index.html
    ingress:
      enabled: true
      tls: true
      urlPrefix: "/discoveryfinder"
      className: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: "my-ca-issuer"
        nginx.ingress.kubernetes.io/rewrite-target: "/$2"
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/x-forwarded-prefix: "/discoveryfinder"
  postgresql:
    nameOverride: "discoveryfinder-postgresql"
    primary:
      persistence:
        enabled: false
        size: 8Gi

sdfactory:
  enabled: false
  secret:
    # -- JWK Set URI
    jwkSetUri: "https://centralidp.example.org/auth/realms/CX-Central/protocol/openid-connect/certs"
    # -- Custodian wallet client id
    clientId: ""
    # -- Custodian wallet client secret
    clientSecret: ""
    # -- Keycloak URL
    authServerUrl: "https://centralidp.example.org/auth"
    # -- Keycloak Realm detail
    realm: ""
    # -- Keycloak Resource detail
    resource: ""
    # -- Details for Custodian wallet URI
    custodianWalletUri: ""
    # -- Details for Clearing House URI
    clearingHouseUri: ""
    # -- Details for Clearing House URL
    clearingHouseServerUrl: ""
    # -- Details for Clearing House Realm
    clearingHouseRealm: ""
    # -- Details for Clearing House Client ID
    clearingHouseClientId: ""
    # -- Details for Clearing House Client Secret
    clearingHouseClientSecret: ""

managed-identity-wallet:
  enabled: false
  ## TODO figure out tls setup with centralidp keycloak
  miw:
    host: "managed-identity-wallets.example.org"
    authorityWallet:
      bpn: &authority-bpn "BPNL00000003CRHK"
      name: "Catena-X"
    database:
      host: "{{ .Release.Name }}-miw-postgres"
      secret: "{{ .Release.Name }}-miw-postgres"
    keycloak:
      url: "https://centralidp.example.org/auth"
      realm: "CX-Central"
      clientId: &miw_client "Cl5-CX-Custodian"
    ssi:
      enforceHttpsInDidWebResolution: "false"
  postgresql:
    nameOverride: miw-postgres
    primary:
      persistence:
        enabled: false
        size: 1Gi
  keycloak:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 90
  readinessProbe:
    initialDelaySeconds: 90
  # -- docs: https://managed-identity-wallets.example.org/ui/swagger-ui/index.html
  ingress:
    enabled: true
    hosts:
      - host: "managed-identity-wallets.example.org"
        paths:
          - path: "/"
            pathType: "ImplementationSpecific"
    tls:
      - secretName: "managed-identity-wallets.example.org-tls"
        hosts:
          - "managed-identity-wallets.example.org"
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "my-ca-issuer"
      nginx.ingress.kubernetes.io/cors-allow-origin: https://portal.example.org
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: GET
      nginx.ingress.kubernetes.io/enable-cors: "true"

dataconsumer:
  enabled: false
  seedTestdata: false
  nameOverride: dataconsumer
  secrets:
    edc-miw-keycloak-secret: changeme  # TODO switch to existing user
  tractusx-connector:
    nameOverride: dataconsumer-edc
    participant:
      id: BPNL000000000000
    controlplane:
      ssi:
        miw:
          url: http://miw:8080
          authorityId: *authority-bpn
        oauth:
          tokenurl: http://lab-centralidp/auth/realms/CX-Central/protocol/openid-connect/token
          client:
            id: *miw_client
            secretAlias: edc-miw-keycloak-secret
      endpoints:
        management:
          authKey: TEST1
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      nameOverride: dataconsumer-db
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-dataconsumer-db:5432/edc"
    vault:
      hashicorp:
        url: http://edc-dataconsumer-vault:8200
      secretNames:
        transferProxyTokenSignerPrivateKey: tokenSignerPrivateKey
        transferProxyTokenSignerPublicKey: tokenSignerPublicKey
        transferProxyTokenEncryptionAesKey: tokenEncryptionAesKey

  vault:
    nameOverride: edc-dataconsumer-vault
    fullnameOverride: edc-dataconsumer-vault
    enabled: true
    server:
      postStart: []

  digital-twin-registry:
    enabled: false

  simple-data-backend:
    enabled: false

tx-data-provider:
  enabled: false
  seedTestdata: true
  backendUrl: http://{{ .Release.Name }}-dataprovider-submodelserver:8080
  registryUrl: http://{{ .Release.Name }}-dataprovider-dtr:8080/api/v3.0
  controlplanePublicUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8084
  controlplaneManagementUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8081
  dataplaneUrl: http://{{ .Release.Name }}-dataprovider-edc-dataplane:8081
  nameOverride: dataprovider
  secrets:
    edc-miw-keycloak-secret: changeme  # TODO switch to existing user
  tractusx-connector:
    nameOverride: dataprovider-edc
    participant:
      id: BPNL000000000000
    controlplane:
      ssi:
        miw:
          url: http://miw:8080
          authorityId: *authority-bpn
        oauth:
          tokenurl: http://lab-centralidp/auth/realms/CX-Central/protocol/openid-connect/token
          client:
            id: *miw_client
            secretAlias: edc-miw-keycloak-secret
      endpoints:
        management:
          authKey: TEST2
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      nameOverride: dataprovider-db
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-dataprovider-db:5432/edc"
    vault:
      hashicorp:
        url: http://edc-dataprovider-vault:8200
      secretNames:
        transferProxyTokenSignerPrivateKey: tokenSignerPrivateKey
        transferProxyTokenSignerPublicKey: tokenSignerPublicKey
        transferProxyTokenEncryptionAesKey: tokenEncryptionAesKey

  vault:
    nameOverride: edc-dataprovider-vault
    fullnameOverride: edc-dataprovider-vault
    enabled: true
    server:
      postStart: []

  digital-twin-registry:
    nameOverride: dataprovider-dtr
    postgresql:
      nameOverride: dataprovider-dtr-db
      auth:
        password: "dtrdataproviderpw"
        existingSecret: dataprovider-secret-dtr-postgres-init
    registry:
      host: dataprovider-dtr.test

  simple-data-backend:
    nameOverride: dataprovider-submodelserver
    ingress:
      enabled: false
